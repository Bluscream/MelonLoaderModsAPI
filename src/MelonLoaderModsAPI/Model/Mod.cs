/* 
 * Melonloader Mods API
 *
 * API to manipulate and list MelonLoader mods
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MelonLoaderModsAPI.Client.SwaggerDateConverter;

namespace MelonLoaderModsAPI.Model
{
    /// <summary>
    /// Mod
    /// </summary>
    [DataContract]
        public partial class Mod :  IEquatable<Mod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mod" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="mention">mention.</param>
        /// <param name="messageid">messageid.</param>
        /// <param name="versionofmsg">versionofmsg.</param>
        /// <param name="uploaddate">uploaddate.</param>
        /// <param name="aliases">aliases.</param>
        /// <param name="versions">versions.</param>
        public Mod(int? id = default(int?), string mention = default(string), int? messageid = default(int?), int? versionofmsg = default(int?), string uploaddate = default(string), List<string> aliases = default(List<string>), List<ModVersions> versions = default(List<ModVersions>))
        {
            this.Id = id;
            this.Mention = mention;
            this.Messageid = messageid;
            this.Versionofmsg = versionofmsg;
            this.Uploaddate = uploaddate;
            this.Aliases = aliases;
            this.Versions = versions;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Mention
        /// </summary>
        [DataMember(Name="mention", EmitDefaultValue=false)]
        public string Mention { get; set; }

        /// <summary>
        /// Gets or Sets Messageid
        /// </summary>
        [DataMember(Name="messageid", EmitDefaultValue=false)]
        public int? Messageid { get; set; }

        /// <summary>
        /// Gets or Sets Versionofmsg
        /// </summary>
        [DataMember(Name="versionofmsg", EmitDefaultValue=false)]
        public int? Versionofmsg { get; set; }

        /// <summary>
        /// Gets or Sets Uploaddate
        /// </summary>
        [DataMember(Name="uploaddate", EmitDefaultValue=false)]
        public string Uploaddate { get; set; }

        /// <summary>
        /// Gets or Sets Aliases
        /// </summary>
        [DataMember(Name="aliases", EmitDefaultValue=false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        /// Gets or Sets Versions
        /// </summary>
        [DataMember(Name="versions", EmitDefaultValue=false)]
        public List<ModVersions> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Mention: ").Append(Mention).Append("\n");
            sb.Append("  Messageid: ").Append(Messageid).Append("\n");
            sb.Append("  Versionofmsg: ").Append(Versionofmsg).Append("\n");
            sb.Append("  Uploaddate: ").Append(Uploaddate).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mod);
        }

        /// <summary>
        /// Returns true if Mod instances are equal
        /// </summary>
        /// <param name="input">Instance of Mod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Mention == input.Mention ||
                    (this.Mention != null &&
                    this.Mention.Equals(input.Mention))
                ) && 
                (
                    this.Messageid == input.Messageid ||
                    (this.Messageid != null &&
                    this.Messageid.Equals(input.Messageid))
                ) && 
                (
                    this.Versionofmsg == input.Versionofmsg ||
                    (this.Versionofmsg != null &&
                    this.Versionofmsg.Equals(input.Versionofmsg))
                ) && 
                (
                    this.Uploaddate == input.Uploaddate ||
                    (this.Uploaddate != null &&
                    this.Uploaddate.Equals(input.Uploaddate))
                ) && 
                (
                    this.Aliases == input.Aliases ||
                    this.Aliases != null &&
                    input.Aliases != null &&
                    this.Aliases.SequenceEqual(input.Aliases)
                ) && 
                (
                    this.Versions == input.Versions ||
                    this.Versions != null &&
                    input.Versions != null &&
                    this.Versions.SequenceEqual(input.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Mention != null)
                    hashCode = hashCode * 59 + this.Mention.GetHashCode();
                if (this.Messageid != null)
                    hashCode = hashCode * 59 + this.Messageid.GetHashCode();
                if (this.Versionofmsg != null)
                    hashCode = hashCode * 59 + this.Versionofmsg.GetHashCode();
                if (this.Uploaddate != null)
                    hashCode = hashCode * 59 + this.Uploaddate.GetHashCode();
                if (this.Aliases != null)
                    hashCode = hashCode * 59 + this.Aliases.GetHashCode();
                if (this.Versions != null)
                    hashCode = hashCode * 59 + this.Versions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
