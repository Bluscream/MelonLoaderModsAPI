/* 
 * Melonloader Mods API
 *
 * API to manipulate and list MelonLoader mods
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MelonLoaderModsAPI.Client.SwaggerDateConverter;

namespace MelonLoaderModsAPI.Model
{
    /// <summary>
    /// ModVersions
    /// </summary>
    [DataContract]
        public partial class ModVersions :  IEquatable<ModVersions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModVersions" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="approvalStatus">approvalStatus.</param>
        /// <param name="reason">reason.</param>
        /// <param name="name">name.</param>
        /// <param name="modversion">modversion.</param>
        /// <param name="vrchatversion">vrchatversion.</param>
        /// <param name="loaderversion">loaderversion.</param>
        /// <param name="modtype">modtype.</param>
        /// <param name="author">author.</param>
        /// <param name="description">description.</param>
        /// <param name="downloadlink">downloadlink.</param>
        /// <param name="sourcelink">sourcelink.</param>
        /// <param name="discord">discord.</param>
        /// <param name="hash">hash.</param>
        /// <param name="changelog">changelog.</param>
        /// <param name="updatedate">updatedate.</param>
        public ModVersions(int? version = default(int?), int? approvalStatus = default(int?), string reason = default(string), string name = default(string), string modversion = default(string), string vrchatversion = default(string), string loaderversion = default(string), string modtype = default(string), string author = default(string), string description = default(string), string downloadlink = default(string), string sourcelink = default(string), string discord = default(string), string hash = default(string), string changelog = default(string), string updatedate = default(string))
        {
            this.Version = version;
            this.ApprovalStatus = approvalStatus;
            this.Reason = reason;
            this.Name = name;
            this.Modversion = modversion;
            this.Vrchatversion = vrchatversion;
            this.Loaderversion = loaderversion;
            this.Modtype = modtype;
            this.Author = author;
            this.Description = description;
            this.Downloadlink = downloadlink;
            this.Sourcelink = sourcelink;
            this.Discord = discord;
            this.Hash = hash;
            this.Changelog = changelog;
            this.Updatedate = updatedate;
        }
        
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="_version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalStatus
        /// </summary>
        [DataMember(Name="ApprovalStatus", EmitDefaultValue=false)]
        public int? ApprovalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Modversion
        /// </summary>
        [DataMember(Name="modversion", EmitDefaultValue=false)]
        public string Modversion { get; set; }

        /// <summary>
        /// Gets or Sets Vrchatversion
        /// </summary>
        [DataMember(Name="vrchatversion", EmitDefaultValue=false)]
        public string Vrchatversion { get; set; }

        /// <summary>
        /// Gets or Sets Loaderversion
        /// </summary>
        [DataMember(Name="loaderversion", EmitDefaultValue=false)]
        public string Loaderversion { get; set; }

        /// <summary>
        /// Gets or Sets Modtype
        /// </summary>
        [DataMember(Name="modtype", EmitDefaultValue=false)]
        public string Modtype { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Downloadlink
        /// </summary>
        [DataMember(Name="downloadlink", EmitDefaultValue=false)]
        public string Downloadlink { get; set; }

        /// <summary>
        /// Gets or Sets Sourcelink
        /// </summary>
        [DataMember(Name="sourcelink", EmitDefaultValue=false)]
        public string Sourcelink { get; set; }

        /// <summary>
        /// Gets or Sets Discord
        /// </summary>
        [DataMember(Name="discord", EmitDefaultValue=false)]
        public string Discord { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets Changelog
        /// </summary>
        [DataMember(Name="changelog", EmitDefaultValue=false)]
        public string Changelog { get; set; }

        /// <summary>
        /// Gets or Sets Updatedate
        /// </summary>
        [DataMember(Name="updatedate", EmitDefaultValue=false)]
        public string Updatedate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModVersions {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Modversion: ").Append(Modversion).Append("\n");
            sb.Append("  Vrchatversion: ").Append(Vrchatversion).Append("\n");
            sb.Append("  Loaderversion: ").Append(Loaderversion).Append("\n");
            sb.Append("  Modtype: ").Append(Modtype).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Downloadlink: ").Append(Downloadlink).Append("\n");
            sb.Append("  Sourcelink: ").Append(Sourcelink).Append("\n");
            sb.Append("  Discord: ").Append(Discord).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  Updatedate: ").Append(Updatedate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModVersions);
        }

        /// <summary>
        /// Returns true if ModVersions instances are equal
        /// </summary>
        /// <param name="input">Instance of ModVersions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModVersions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ApprovalStatus == input.ApprovalStatus ||
                    (this.ApprovalStatus != null &&
                    this.ApprovalStatus.Equals(input.ApprovalStatus))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Modversion == input.Modversion ||
                    (this.Modversion != null &&
                    this.Modversion.Equals(input.Modversion))
                ) && 
                (
                    this.Vrchatversion == input.Vrchatversion ||
                    (this.Vrchatversion != null &&
                    this.Vrchatversion.Equals(input.Vrchatversion))
                ) && 
                (
                    this.Loaderversion == input.Loaderversion ||
                    (this.Loaderversion != null &&
                    this.Loaderversion.Equals(input.Loaderversion))
                ) && 
                (
                    this.Modtype == input.Modtype ||
                    (this.Modtype != null &&
                    this.Modtype.Equals(input.Modtype))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Downloadlink == input.Downloadlink ||
                    (this.Downloadlink != null &&
                    this.Downloadlink.Equals(input.Downloadlink))
                ) && 
                (
                    this.Sourcelink == input.Sourcelink ||
                    (this.Sourcelink != null &&
                    this.Sourcelink.Equals(input.Sourcelink))
                ) && 
                (
                    this.Discord == input.Discord ||
                    (this.Discord != null &&
                    this.Discord.Equals(input.Discord))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Changelog == input.Changelog ||
                    (this.Changelog != null &&
                    this.Changelog.Equals(input.Changelog))
                ) && 
                (
                    this.Updatedate == input.Updatedate ||
                    (this.Updatedate != null &&
                    this.Updatedate.Equals(input.Updatedate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ApprovalStatus != null)
                    hashCode = hashCode * 59 + this.ApprovalStatus.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Modversion != null)
                    hashCode = hashCode * 59 + this.Modversion.GetHashCode();
                if (this.Vrchatversion != null)
                    hashCode = hashCode * 59 + this.Vrchatversion.GetHashCode();
                if (this.Loaderversion != null)
                    hashCode = hashCode * 59 + this.Loaderversion.GetHashCode();
                if (this.Modtype != null)
                    hashCode = hashCode * 59 + this.Modtype.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Downloadlink != null)
                    hashCode = hashCode * 59 + this.Downloadlink.GetHashCode();
                if (this.Sourcelink != null)
                    hashCode = hashCode * 59 + this.Sourcelink.GetHashCode();
                if (this.Discord != null)
                    hashCode = hashCode * 59 + this.Discord.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Changelog != null)
                    hashCode = hashCode * 59 + this.Changelog.GetHashCode();
                if (this.Updatedate != null)
                    hashCode = hashCode * 59 + this.Updatedate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
